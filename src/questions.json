[
  {
    "id": "1",
    "title": "Методы жизненного цикла в основном используются для ______.",
    "variants": [
      "отслеживания истории событий",
      "усовершенствования компонентов",
      "освобождения ресурсов"
    ],
    "correct": 3
  },
  {
    "id": "2",
    "title": "Какой из следующих методов в компоненте React вызывается после первого рендеринга компонента?",
    "variants": [
      "componentDidUpdate",
      "componentDidMount",
      "componentWillUnmount"
    ],
    "correct": 2
  },
  {
    "id": "3",
    "title": "Какие преимущества у ReactJS?",
    "variants": [
      "Увеличивает производительность приложения с Virtual DOM",
      "JSX делает код более понятным и простым в написании",
      "Рендеринг как на стороне клиента, так и сервера",
      "Легко интегрируется с другими фреймворками (Angular, BackboneJS), так как это только библиотека представления",
      "Все вышеперечисленные"
    ],
    "correct": 5
  },
  {
    "id": "4",
    "title": "В чем заключается значение пропса 'key' при рендеринге списка элементов в React?",
    "variants": [
      "Помогает React определить, какие элементы списка изменились",
      "Используется для стилизации элементов списка",
      "Увеличивает скорость рендеринга списка",
      "Это обязательный пропс для всех элементов списка"
    ],
    "correct": 1
  },
  {
    "id": "5",
    "title": "Какой порт по умолчанию используется для запуска проекта create-react-app?",
    "variants": ["3000", "8080", "5000", "8000"],
    "correct": 1
  },
  {
    "id": "6",
    "title": "Для чего в React используется хук 'useEffect'?",
    "variants": [
      "Управляет жизненным циклом компонента",
      "Обрабатывает изменения состояния",
      "Создает новый эффект",
      "Ни один из вышеперечисленных"
    ],
    "correct": 1
  },
  {
    "id": "7",
    "title": "Что такое 'компонент высшего порядка' (HOC) в React?",
    "variants": [
      "Компонент с более высоким z-index",
      "Компонент с состоянием",
      "Компонент, который возвращает другой компонент",
      "Компонент, который рендерит HTML-элементы"
    ],
    "correct": 3
  },
  {
    "id": "8",
    "title": "Какова правильная синтаксическая конструкция для создания функционального компонента в React?",
    "variants": [
      "class MyComponent extends React.Component { render() { return <div />; }}",
      "new ReactComponent(MyComponent)",
      "function MyComponent() { return <div />; }",
      "React.createComponent(MyComponent)"
    ],
    "correct": 3
  },
  {
    "id": "9",
    "title": "Для чего в React используется API 'Context'",
    "variants": [
      "Для повышения производительности",
      "Для передачи данных между компонентами без необходимости передачи свойств",
      "Для управления жизненным циклом компонентов",
      "Для подключения к базам данных"
    ],
    "correct": 2
  },
  {
    "id": "10",
    "title": "Какой правильный способ создания состояния в классовом компоненте? class MyComponent extends React.Component { ... }",
    "variants": [
      "this.state = { value: '' };",
      "const state = { value: '' };",
      "useState({ value: '' });",
      "setState({ value: '' });"
    ],
    "correct": 1
  },
  {
    "id": "11",
    "title": "Что делает хук 'useMemo' в React?",
    "variants": [
      "Запоминает вычисленное значение",
      "Экономит использование памяти",
      "Вспоминает ранее отрендеренные компоненты",
      "Запоминает состояние компонента"
    ],
    "correct": 1
  },
  {
    "id": "12",
    "title": "Что такое 'Фрагмент' в React?",
    "variants": [
      "Часть состояния компонента",
      "Инструмент для мемоизации",
      "Компонент, который может возвращать несколько элементов",
      "Компонент высшего порядка"
    ],
    "correct": 3
  },
  {
    "id": "13",
    "title": "Что представляют собой 'props.children' в компоненте React?",
    "variants": [
      "Состояние родительского компонента",
      "Дочерние элементы, переданные компоненту",
      "Тип дочернего компонента React",
      "Props дочерних компонентов"
    ],
    "correct": 2
  },
  {
    "id": "14",
    "title": "Какая из этих характеристик НЕ относится к React?",
    "variants": [
      "Виртуальный DOM",
      "Рендеринг на стороне сервера",
      "Встроенные HTTP-запросы"
    ],
    "correct": 3
  },
  {
    "id": "15",
    "title": "Как React управляет отправкой форм?",
    "variants": [
      "Автоматически отправляя POST-запрос",
      "Используя обработчик событий на элементе формы",
      "Используя специальную библиотеку React для отправки форм",
      "React не может управлять отправкой форм"
    ],
    "correct": 2
  },
  {
    "id": "16",
    "title": "Какова цель хука 'useCallback' в React?",
    "variants": [
      "Для запоминания экземпляра функции между рендерами",
      "Для вызова функции в качестве колбэка после изменений состояния",
      "Для эффективного управления вызовами API",
      "Для обновления состояния на основе предыдущего состояния"
    ],
    "correct": 1
  },
  {
    "id": "17",
    "title": "Что такое 'prop drilling' в React?",
    "variants": [
      "Метод определения PropTypes в компоненте",
      "Библиотека React для управления свойствами",
      "Поиск ошибок в пропсах",
      "Передача пропсов через несколько уровней компонентов"
    ],
    "correct": 4
  },
  {
    "id": "18",
    "title": "Что означает 'поднятие состояния' (lifting state up) в React?",
    "variants": [
      "Улучшение производительности обновлений состояния",
      "Перемещение состояния в общего предка компонентов, которым оно нужно",
      "Автоматическое управление изменениями состояния в дочерних компонентах",
      "Передача состояния в компонент высшего порядка"
    ],
    "correct": 2
  },
  {
    "id": "19",
    "title": "Как оптимизировать производительность для списка элементов в React, которые часто перерисовываются?",
    "variants": [
      "Используя shouldComponentUpdate",
      "Используя PureComponent",
      "Используя React.memo",
      "Используя useState",
      "Используя useEffect"
    ],
    "correct": 3
  },
  {
    "id": "20",
    "title": "Чем свойства отличаются от состояний?",
    "variants": [
      "Состояния можно изменять, свойства нельзя",
      "Свойства для работы со значениями, состояния для работы с функциями",
      "Состояния для работы со значениями, свойства для работы с функциями",
      "Свойства можно изменять, состояния нельзя"
    ],
    "correct": 1
  },
  {
    "id": "21",
    "title": "Сколько родительских элементов может вовзращать компонент?",
    "variants": [
      "Не более 3",
      "Зависит от случая",
      "Неограниченное количество",
      "Только 1"
    ],
    "correct": 4
  },
  {
    "id": "22",
    "title": "Какая компания разработала React JS?",
    "variants": ["Twitter", "Google", "Facebook", "Microsoft"],
    "correct": 3
  },
  {
    "id": "23",
    "title": "React JS – это...",
    "variants": [
      "MVC-фреймворк",
      "фреймворк",
      "Back-end платформа",
      "JavaScript библиотека"
    ],
    "correct": 4
  },
  {
    "id": "24",
    "title": "В каком варианте компонент 'MyComponent' записан синтаксически правильно?",
    "variants": [
      "< MyComponent >",
      "</ MyComponent >",
      "< MyComponent />",
      "< myComponent />"
    ],
    "correct": 3
  },
  {
    "id": "25",
    "title": "Какая команда является правильной, чтобы создать новый React проект?",
    "variants": [
      "npx create-react-app myApp",
      "npm create-react-app myApp",
      "npx create-react-app",
      "npm create-react-app"
    ],
    "correct": 1
  }
]
